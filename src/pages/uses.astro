---
import Layout from "../layouts/Default.astro";
import { Image } from "astro:assets";
import dayjs from "dayjs";
import uses from "../../public/files/uses.json";
import { getGistData } from "@/utils/getGist";
import { getSvgMatch, svgs } from "@/utils/getSvgMatch";
const categories = Object.keys(uses);
interface UseItem {
  title: string;
  url?: string;
  category?: string;
  more?: Array<{ [key: string]: string }>;
}

const props = {
  title: "Uses",
  description: "Things that I use on an almost daily basis.",
};

const gistData = await getGistData();
let installedApps: any[] = [];
const fileName = "installed-apps.txt";
if (
  gistData?.files &&
  gistData.files[fileName] &&
  typeof gistData.files[fileName].content === "string"
) {
  installedApps = gistData.files[fileName].content.split("\n");
  installedApps = installedApps.map((app) => app.slice(0, -4));
} else {
  console.error(`Could not find ${fileName} in gist data`);
}

let lastUpdated = "";

if (gistData?.updated_at) {
  lastUpdated = gistData.updated_at;
} else {
  console.error(`Could not find updated_at in gist data`);
}
---

<Layout {...props}>
  <main>
    <p>
      Last updated: <time datetime={`${lastUpdated}`}
        >{dayjs(lastUpdated).format("YYYY-MM-DD")}</time
      >
    </p>
    <h1 set:text="Uses" />
    <p set:html={props.description} />
    <section id="uses">
      <ul>
        {
          categories.map((category) => (
            <>
              <li id={category}>
                <h3
                  set:text={
                    category.charAt(0).toUpperCase() + category.slice(1)
                  }
                />
                <ul>
                  {uses[category as keyof typeof uses].map((item: UseItem) => {
                    const { svgMatch, route } = getSvgMatch(item.title, svgs);

                    return item.url ? (
                      <li>
                        {svgMatch && (
                          <Image
                            src={route}
                            width="20"
                            height="50"
                            alt={item.title}
                          />
                        )}
                        <a
                          set:text={item.title}
                          target="_blank"
                          rel="external"
                          href={item.url}
                        />
                      </li>
                    ) : (
                      <li set:text={item.title} />
                    );
                  })}
                </ul>
              </li>
            </>
          ))
        }
        <li id="apps">
          <h3 set:text="Apps" />
          <ul>
            {
              installedApps.map((app) => {
                const { svgMatch, route } = getSvgMatch(app, svgs);

                return (
                  <li>
                    {svgMatch && (
                      <Image
                        src={route}
                        width="20"
                        height="50"
                        alt={app}
                        data-svgMatch={
                          typeof svgMatch.route === "object" ? "true" : "false"
                        }
                      />
                    )}
                    <a
                      set:text={app}
                      target="_blank"
                      rel="external"
                      href={
                        svgMatch
                          ? svgMatch.url
                          : `https://www.google.com/search?q=${app}`
                      }
                    />
                  </li>
                );
              })
            }
          </ul>
        </li>
      </ul>
    </section>
  </main>
</Layout>
